// d.hatena.mac
$mn = "はてなダイアリー用マクロ - ";
// copyright (C) taketori <taketori at x10d.jp>
// ライセンスは、いわゆる「修正BSD」です。
// 動作環境は、秀丸(Ver.8.02以上)・COM・cmd.exe・csc.exeの 読み出し・実行ができ、編集中のファイル・はてなダイアリの読み出し・書き込みができ、本マクロのあるフォルダとその配下のフォルダにてファイルを作成・実行・書き込みできる 環境。
// 以上の詳細は、配布ファイルに同梱の<README.txt>を参照。本マクロのマニュアルは<d.hatena.mac.txt>。

$id = "";

// 実行できない条件の時は、さっさと終了する。
if( version < 801 ){
	message "秀丸のバージョンが古いです。" + currentmacrobasename + "を終了します。";
	endmacro;
}

// 初期設定
	#_[0] = x;	#_[1] = y;
	$_[0] = searchbuffer;	#_[2] = searchoption;	$_[1] = getsearchhist(0);
	#_[3] = foundhilighting;	$_[2] = foundbuffer;	#_[4] = foundoption;
	#_[5] = overwrite;	#_[6] = browsemode;	#_[7] = readonly;	#_[8] = imestate;	#_[9] = freecursor;
	if( #_[5] )	overwriteswitch;
	if( #_[6] )	browsemodeswitch;
	if( #_[7] )	readonlyswitch;
	if( #_[8] )	imeswitch;
	if( #_[9] )	freecursorswitch;
setcompatiblemode 0x0002 | 0x0008 | 0x0200;		// 0x002=折りたたみを無視ししてなるべく維持, 0x0008=部分編集を無視してなるべく維持, 0x0200=検索での表示を「範囲選択」。

INIT:

	// 設定ファイル、本マクロ用実行ファイルの設置場所を取得する。
	$$ini = currentmacrofilename + ".ini";			// 設定ファイル
	if(!existfile($$ini)){
		call EXIT "\t" + $$ini + " (設定ファイル)\nがないので継続できません。\n配布ファイルに同梱の d.hatena.mac.ini.sampleをコピーし上記に改名してください";
	}
	$$dll_src = currentmacrobasename + ".Settings.cs";
	$$dll     = currentmacrobasename + ".util.dll";
	$$exe     = currentmacrobasename + ".exe";
	call compile_src $$dll_src, $$dll, $$exe;
	if(##return)	call EXIT "  " + $$dll + "\n  " + $$exe + "\nのいずれかor両方のコンパイルを中止しました。\n　理由はたぶん\n・ " + $$dll_src + " にエラーがある。\n・.Net Frameworkがインストールされていないか古い。\n・コマンドラインが長い(マクロが存在するディレクトリのフルパス名が長い)\nのいずれかです。アウトプット枠も参照してください。";

MAIN:

	##char = inputchar($mn + getstaticvariable("x10d_" + currentmacrobasename + "_user", 0) + ": Press [p]ost, [g]et, [m]odify, [d]elete or [h]elp.");
	if     (##char == 'p')	call post $$ini;
	else if(##char == 'g')	call get_entry $$ini;
	else if(##char == 'm')	call mod_entry $$ini;
	else if(##char == 'd')	call del_entry $$ini;
	else if(##char == 'h')	call disp_help;
	else 										call disp_help;

EXIT:

	if($$1 != "")	message $mn + "\n" + $$1;

	escape;
	moveto #_[0], #_[1];
	if( #_[5] )	overwriteswitch;
	if( #_[6] )	browsemodeswitch;
	if( #_[7] )	readonlyswitch;
	if( #_[8] )	imeswitch;
	if( #_[9] )	freecursorswitch;

endmacro;

disp_help:

	message $mn + "\n"
	      + "使い方:\n"
	      + "マクロを起動してから、[ ]内のいずれかのキーを押下する。\n"
	      + "[p]=投稿、[g]=取得、[m]=修正、[d]=消去、[h]=ヘルプ(この画面)\n"
	      + "\n"
	      + "投稿:\t範囲選択をしておくと、その範囲の1行目をタイトルに、2行目以降を本文にします。\n"
	      + "\t範囲選択していない場合は、編集中の文章すべてを対象にします。\n"
	      + "修正:\t用いるデータは[投稿]と同様です。データは事前に[取得]しておくことをおすすめします。\n"
	      + "\n"
	      + "データ先頭に「date: 日付」「blog:はてなのid」で、日記の日付、投稿に使うユーザ名などを設定できる。\n"
	      + "(適当な日記を[取得]してデータ形式の参考にしてください)\n\n"
	      + "　\"下書き\" に保存したいときは「draft:はてなid」という行をデータ先頭に記載して[投稿]。\n"
	      + "　\"下書き\" から \"公開\" への変更は、当該下書きを[取得]して「draft:下書きURI」という行を「blog:下書きURI」に変更してから[修正]。";

return 0;

post:
//arg: $1:iniファイル

	// 投稿する内容を生成する。
	call make_data;
	##dom  = ##return;
	$$uri  = getpropstr(member(##dom, "selectSingleNode", "//uri"), "text");
	##info = val(getpropstr(member(##dom, "selectSingleNode", "//publish"), "text"));

	// メンバURIが記載してあったなら、それを上書きするか確認。
	$$req = "POST";
	if(##info & 1/*メンバURI*/){
		if(##info & 2 == 0/*コレクション名とヘッダに相違*/){
			if(##info & 4)	message $mn + "ご所望の動作は、まだ実装されてないのでできません。";
			else						message $mn + "ご所望の動作は、[修正]を選んだらできます。";
			return 0;
		}
		// メンバURIなのに「投稿」の時。
		call runex_to currentmacrofilename + ".exe msgbox \"" + $mn + "\" "
		            + "\"URIの記事を、現在の内容に置き換えますか。\n"
		            + "[はい]=上書き　[いいえ]=新規投稿　[キャンセル]=接続しない\"";
		if(##return == 6/*Yes*/){
			$$req = "PUT";
		}else if(##return == 7/*No*/){
			$$uri = leftstr($$uri, strrstr($$uri, "/atom/"))
			      + "/atom/" + midstr("blogdraft", (##info & 4), (##info & 4)/4 + 4);
		}else{		//Cancel
			return 0;
		}
	}

	// はてなに接続して投稿する。
	call connect_hatena $$req, $$uri, ##dom, $$1;		//失敗の時はマクロ終了。
	##dom = ##return;
	/*NOTE: このマクロでは以下のような形式であることを前提に作っている。
	<link rel="edit" href="〜"/><link rel="alternate" 〜/>
	要するに、linkノードはrel=editを持つもの → rel=alternateを持つもの の順番である。*/
	title $mn + "投稿完了";
	##link = member(##dom, "selectSingleNode", "//link");
	if(member(##link, "getAttribute", "rel") == "edit"){
		message $mn + "\n" + member(##link, "getAttribute", "href") + "\nに投稿しました。";
	}else{
		message $mn + "\n" + midstr(member(member(##dom, "selectSingleNode", "//id"), "text"), strlen("tag:d.hatena.ne.jp,2008:"), ) + "\nに投稿しました。";
	}

return 0;

get_entry:
//arg: $1:iniファイル

	call get_list $$1, 1, "表示する";
	$$uri = $$return;
	call connect_hatena "GET", $$uri, 0, $$1;		//失敗の時はマクロ終了。
	##dom = ##return;
	##is_draft = (strstr($$uri, "/atom/blog/") == -1);		//draft=1, blog=0

	title $mn;
	question $mn + "\n以下のデータをカーソル部分に挿入します。\n[はい] = 挿入。[いいえ] = ダイアログで表示。\n\n" + $$uri;
	$$msg = midstr("blog: draft:", ##is_draft * 6, ##is_draft + 5)		// $$uri中に"blog"がない場合は、$$uriのヘッダを"draft"にする。
	      + $$uri + "\n"
	      + "updated: " + member(member(##dom, "selectSingleNode", "//updated"), "text") + "\n"
	      + getpropstr(member(##dom, "selectSingleNode", "//title"), "text") + "\n";
	if(##is_draft){
		$$msg = $$msg + getpropstr(member(##dom, "selectSingleNode", "//content"), "text");
	}else{
		$$msg = $$msg + getpropstr(member(##dom, "selectSingleNode", "//hatena:syntax"), "text");
	}
	if(result)	insert $$msg;
	else				message $$msg;

return 0;

mod_entry:
//arg: $1:iniファイル

	// 投稿する内容を生成する。
	call make_data;
	##dom = ##return;
	$$uri = getpropstr(member(##dom, "selectSingleNode", "//uri"), "text");
	##info = val(getpropstr(member(##dom, "selectSingleNode", "//publish"), "text"));

	if(##info != 1){
		if((##info & 1) == 0){
			call get_list $$1, 1, "修正する", (##info & 4)/4;
			$$uri = $$return;
		}
		question $mn + "修正していいですか。";
		if(!result)	return;
	}else{
		call runex_to currentmacrofilename + ".exe msgbox \"" + $mn + "\" "
		              + "\"URIの記事を現在編集中の内容で上書き後、日記として公開しますか。\n"
		              + "[はい]=上書きして公開　[いいえ]=サーバの内容で公開　[キャンセル]=接続中止\"";
		if(##return == 6/* Yes */){
			setpropnum member(##dom, "selectSingleNode", "//publish"), "text", 3;
			call connect_hatena "PUT", $$uri, ##dom, $$1;		//失敗の時はマクロ終了。
			setpropnum member(##dom, "selectSingleNode", "//publish"), "text", 1;
		}else if(##return == 7/* No */){
			// 何もしない。
		}else{	/* Cancel */
			return 0;
		}
	}
	call connect_hatena "PUT", $$uri, ##dom, $$1;		//失敗の時はマクロ終了。

	// 投稿に成功。
	title $mn + "投稿完了";
	message $mn + "\n" + member(member(##return, "selectSingleNode", "//link"), "getAttribute", "href") + "\nを修正しました。";

return 0;

del_entry:
//arg: $1:iniファイル

	call make_data;
	$$uri = getpropstr(member(##return, "selectSingleNode", "//uri"), "text");
	if((##uri & 1) == 0){
		call get_list $$1, 1, "削除する";
		$$uri = $$return;
	}
	title $mn;
	question $mn + "本当に削除しますか。\n" + $$uri;
	if(!result)	return;
	call connect_hatena "DELETE", $$uri, 0, $$1;		//失敗の時はマクロ終了。
	message $mn + "\n削除しました。";

return 0;

get_list:
//arg: $1:iniファイル, #2:ページ数, $3:何の対象か, #4:下書きか(0=日記, 1=下書き)
//ret: $選択したエントリのURI

	// 2ページ以降の時は、前のページへの案内をつける。
	##i = 0;
	if(1 < ##2){
		$$menu[##i] = "&b <--- 前の20件 ---";
		##i = ##i + 1;
	}

	// 現在のページの20件を取得する。
	$$_ = "asdfghjklqwertyuiopvm";		// メニューの頭につけるあれ
	call connect_hatena "GET",
	                    "http://d.hatena.ne.jp/%user%/atom/" + midstr("blogdraft", ##4 * 4, ##4 + 4) + "?page=" + str(##2),
	                    0, $$1;		//失敗の時はマクロ終了。
	##entrys = member(##return, "selectNodes", "//entry"); //NOTE: not ##entries
	##items = member(##entrys, "length");
	while(##i < ##items + (1 < ##2)){
		##entry = getcollection(##entrys);
		$$menu[##i] = "&" + midstr($$_, ##i, 1) + " " + member(member(##entry, "selectSingleNode", "title"), "text");
		$$uri[##i] = member(member(##entry, "selectSingleNode", "link"), "getAttribute", "href");
		##i = ##i + 1;
	}

	// このページで20件あるときは次のページもあると見なして、次のページへの案内をつける。
	if(##items == 20){
		$$menu[##i] = "&n --- 次の20件 --->";
		##i = ##i + 1;
	}

	// 日記と下書きの表示変更
	$$menu[##i] = "\x01";
	$$menu[##i + 1] = "&z 日記 <--> 下書き";
	##i = ##i + 2;

	// メニューを表示する。
	title $mn + $$3 + "日記のタイトルをメニューの中から選択してください。";
	menuarray $$menu, ##i;
	if(result == 0)													call EXIT;															// cancel
	if(result == 1       && 1 < ##2)				call get_list $$1, ##2 - 1, $$3, ##4;		// 前の〜
	if(result == ##i - 2 && ##items == 20)	call get_list $$1, ##2 + 1, $$3, ##4;		// 次の〜
	if(result == ##i)												call get_list $$1, 1,       $$3, ##4^1;	// 日記<-->下書き
	else return $$uri[result - 1];

return $$return;

compile_src:
//arg: $1:DLLソースのファイル名, $2:DLLのファイル名, $3:実行ファイル名($1〜$3はパスを含まない)
//ARG: $mn,  Registory
//ret: #コンパイルの結果(0=成功, 0以外=失敗)

	title $mn + "コンパイルする準備をしています。";
	if(existfile(currentmacrodirectory + "\\" + $$2)){
		##objFSO = createobject("Scripting.FileSystemObject");
		$$src = getpropstr(member(##objFSO, "GetFile", currentmacrodirectory + "\\" + $$1), "DateLastModified");
		$$dll = getpropstr(member(##objFSO, "GetFile", currentmacrodirectory + "\\" + $$2), "DateLastModified");
		if(existfile(currentmacrodirectory + "\\" + $$3)
		&& strlen($$dll)
		&&  val(midstr($$src, 0, 2) + midstr($$src, 3, 2) + midstr($$src, 6, 2)
		       + midstr($$src, 13, 2) + midstr($$src, 16, 2))
		  < val(midstr($$dll, 0, 2) + midstr($$dll, 3, 2) + midstr($$dll, 6, 2)
		       + midstr($$dll, 13, 2) + midstr($$dll, 16, 2))){
			title $mn + "DLLの方が新しいかDLLのソースがないため、コンパイルしませんでした。";
			return 0;
		}
	}else{
		if(!existfile(currentmacrodirectory + "\\" + $$1)){
			call EXIT "\t" + $$1 + " (本マクロ用実行ファイルの DLLソース)\nが " + currentmacrodirectory + " にないので継続できません。\n配布ファイルに同梱の d.hatena.mac.Settings.cs.sample をコピーし上記に改名してください。\n\n　このファイルにユーザID(とさらに任意でパスワード)を記載しておくと、複数のはてなダイアリーを使い分けることができます。\n　詳細は上記のファイルをご覧ください。";
		}
	}

	// .NET Frameworkのインストールディレクトリを推定してコンパイルする。
	//NOTE: 持ち出しキットを利用しているときは、秀丸のopenregの結果がfalseになるので使えない。またVer2以上の.NET Frameworkでないと面倒くさいことになるのでスクリプトでもできない。
	//NOTE: これ以上長いコマンドラインでは、外部プログラムが実行されない。
	title $mn + $$2 + "を実行ファイルへコンパイルしています。";
	##dll = loaddll("HmOutputPane.dll");
	if(!##dll)	call EXIT "HmOutputPane.dll(アウトプット枠を操作するDLL)のロードに失敗しました。";
	##hOP = dllfunc(##dll, "GetWindowHandle", hidemaruhandle(0));		// 0=アウトプット枠が閉じている。
	if(!dllfunc(##dll, "Push",hidemaruhandle(0)))	call EXIT "アウトプット枠の内容の待避に失敗しました。";
	call runex_to getenv("ComSpec") + " /C "
	  // %r=.NET Frameworkのインストールフォルダ を取得して代入する。
	  + "FOR /F \"skip=4 tokens=3\" %r IN ('reg.exe QUERY HKLM\\SOFTWARE\\Microsoft\\.NETFramework /v InstallRoot') "
	  // フォルダ名で降順に列挙し、%c=csc.exeへのフルパス として代入する。
	  + "DO @(FOR /F \"delims=\" %c IN ('\"dir/S/B %r\\csc.exe|sort/R\"') "
	  // %cを利用してコンパイル。失敗したら順次古いバージョンでコンパイル。
	       + "DO @(echo -- %c --"
	          + "& cd/D " + currentmacrodirectory
	          + "& %c /warnaserror+ /w:4 /t:library /out:" + $$2 + " " + $$1
	          +"&& %c /warnaserror+ /w:4 /t:winexe /R:" + $$2 + " /out:" + $$3 + " .\\src\\*.cs"
	  // コンパイルできたら、その場で直ちに終了する。何かエラーがあれば、(ほかにもインストールされているバージョンがあれば)ループを回す。
	          +"&& exit 0))",
	  7, "";

	if(!##return){
		if(!dllfunc(##dll, "Pop",hidemaruhandle(0)))	call EXIT "アウトプット枠の内容の復元に失敗しました。";
		if(!##hOP){
			if(sendmessage(dllfunc(##dll, "GetWindowHandle", hidemaruhandle(0)),
			               0x111/*WM_COMMAND*/, 1001/*枠を閉じる*/, 0)){
				//NOTE: 「if(condA && condB)」はcondAがfalseでもcondBを評価してしまう。
				call EXIT "アウトプット枠を閉じる際にエラーが起きました。";
			}
		}
	}
	freedll ##dll;

return ##return;

runex_to:
// 引数で指定されたプログラムをrunexを用いて実行し、アウトプット枠に出力する。
//arg: $1:実行するプログラムのフルパス, #2:出力する場所, $3:#2がファイルの時のファイル名
//ret: 0=正常に起動でき終了コード0だった。0以外=プログラムの起動に失敗か終了コードが0以外。

	if(520/*Ver8.02現在での最長*/ <= strlen($$1))	return 1;
	runex $$1, 1/*sync:sync*/, 0, ""/*stdin:none*/, ##2, $$3/*stdout*/, 0, ""/*stderr:none*/, 1, ""/*folder:current*/, 2/*show:hide*/, 0/*nodraw:draw*/, 0/*code:ansi*/;

return (result == false) + getresultex(9);

make_data:
// 編集中の秀丸から必要なデータを抽出し、投稿用のデータにする。
//arg: --
//ret: #取得したDOMDocumentオブジェクトの番号

	$$make_data_mac = currentmacrofilename + ".makedata.mac";
	if(!existfile($$make_data_mac))	call EXIT $$make_data_mac + "がないので続行できません。";
	execmacro $$make_data_mac, $mn, currentmacrofilename;
	if(3 <= strlen(getresultex(-1)))	call EXIT getresultex(-1);		// 3文字以上ならたぶんエラーメッセージ。
	##ret = val(getresultex(-1));		// 3文字以下ならたぶん取得したDOMDocumentオブジェクトの番号。

return ##ret;

connect_hatena:
// XMLHTTPのopenメソッドを呼び出したのち、取得したXMLをDOMDocumentでパースする。
//arg: $1:接続方法(POST/GET等), $2:接続するURI, #3:オブジェクトの番号(sendの引数), $4:INIファイル名
//ret: #:get_dom("Msxml2.DOMDocument.3.0"オブジェクトの番号)。$1が"DELETE"の時はレスポンス番号(200)。エラーの時はマクロ終了。
//NOTE: 第3引数のオブジェクトは、この関数で破棄される。

	// ユーザ名を設定する。
	call set_user ##3;
	if($$return == "")	call EXIT "ユーザ名かパスワードが指定されていません。";

	// URI中の%user%をユーザ名に置き換える。
	$$uri = $$2;
	##p = strstr($$2, "%user%");
	if(0 < ##p){
		$$uri = leftstr($$2, ##p) + $$return + midstr($$2, ##p + 6, );
	}

	// 接続するための準備。
	title $mn + $$1 + "のために接続 " + $$uri;
	##xmlhttp = createobject("Msxml2.XMLHTTP.3.0");
	if(!result)	call EXIT "Msxml2.XMLHTTP.3.0が使えない環境のため、続行できません。";
	callmethod ##xmlhttp, "open", $$1, $$uri, 0;
	callmethod ##xmlhttp, "setRequestHeader", "X-WSSE", getinistr($$4, currentmacrobasename, "x-wsse");
	callmethod ##xmlhttp, "setRequestHeader", "Content-Type", "text/xml";
	// 下書きエントリーの日記への公開。
	if($$1 == "PUT"
	&& val(getpropstr(member(##3, "selectSingleNode", "//publish"), "text")) == 1){
		callmethod ##xmlhttp, "setRequestHeader", "X-HATENA-PUBLISH", 1;
	}
	// キャッシュ対策。
	callmethod ##xmlhttp, "setRequestHeader", "If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT";
	if(getinistr($$4, currentmacrobasename, "Cache-Control") != ""){
		callmethod ##xmlhttp, "setRequestHeader", "Cache-Control",
		           getinistr($$4, currentmacrobasename, "Cache-Control");
	}
	if(getininum($$4, currentmacrobasename, "Pragma")){
		callmethod ##xmlhttp, "setRequestHeader", "Pragma", "no-cache";
	}
	// 実際に接続する。
	title $mn + $$1 + "を試しています。しばらくお待ちください。 " + $$uri;
	if(##3)	callmethod ##xmlhttp, "send", member(##3, "xml");
	else 		callmethod ##xmlhttp, "send", "";
	title $mn + $$1 + "を完了しました。" + $$uri;
	writeinistr $$4, currentmacrobasename, "x-wsse", 0;
	writeinistr $$4, currentmacrobasename, "user", 0;

	// 結果判定。
	##status = getpropnum(##xmlhttp, "status");
	title $mn + "XMLHTTP result = " + str(##status) + ":" +  getpropstr(##xmlhttp, "statusText");
	if(300 <= ##status)	call EXIT $$1 + "できません。: " + $$uri;
	if($$1 == "DELETE")	return ##status;
	call get_dom ##xmlhttp, $$uri;

return ##return;

get_dom:
// DOMオブジェクトの確保。
//arg: #1:XMLHTTPオブジェクトの番号(0=$2をファイル名と見なしその内容を用いる), $2:接続ドメイン(#1=0以外) / 開くファイルのフルパス(#1=0)
//ARG: $mn
//ret: # "Msxml2.DOMDocument.3.0"オブジェクトの番号。エラーの時はマクロ終了。

	title $mn + "XMLを解析しています : " + $$2;
	##dom = createobject("Msxml2.DOMDocument.3.0");
	if(!result)	call EXIT "Msxml2.DOMDocument.3.0が使えない環境のため、続行できません。";
	setpropnum ##dom, "async", 0;

	// XML解析
	if(##1){
		//NOTE: 「member(member(##1,"responseXML"),"xml")」ではGET ID/atom/blogの時解析に失敗する。また「member(##1,"responseXML")」では##domに対してプロパティ・メソッドが発行できない。
		callmethod ##dom, "loadXML", getpropstr(##1, "responseText");
	}else{
		callmethod ##dom, "load", $$2;
	}
	if(member(member(##dom, "parseError"), "errorCode") != 0){
		call EXIT $$2 + " から取得したXMLファイルの解析に失敗しました:\n" + member(member(##dom, "parseError"), "reason");
	}
	title $mn + "XMLの解析を完了しました。: " + $$2;

return ##dom;

set_user:
// ユーザ名を設定する。パスワードが取得できたらX-WSSEを設定する。
//arg:DOMDocumentオブジェクトの番号
//ret:$ユーザ名

	// 既存設定を参照する。
	title $mn + "ユーザ名・パスワードを設定しています。";
	$$user = getpropstr(member(##1, "selectSingleNode", "//user"), "text");
	if($$user == "")	$$user = getstaticvariable("x10d_" + currentmacrobasename + "_user", 0);
	if($$user == "")	$$user = $id;

	// 実行ファイルでユーザ名を設定/確認する。
	$$exe = currentmacrofilename +  ".exe";
	call runex_to $$exe +  " user " + $$user;
	$$user = getinistr(currentmacrofilename +  ".ini", currentmacrobasename, "user");
	if(##return){		// パスワードが設定されていない。
		if(leftstr($$user, 1) == "*"
		&& rightstr($$user, 1) == "*"){
			$$user = input($mn + "\nはてなダイアリーのユーザ名を入力してください。\n[キャンセル]＝中止", "YourID");
		}
		if($$user == "")	return "";
		$$pw = input($mn + "\nユーザ名:" + $$user + "　のパスワードを入力してください。\n入力文字はそのまま表示されるので周囲に注意。", "password");
		if($$pw == "")	return "";
		call runex_to $$exe +  " user " + $$user + " " + $$pw;
	}
	setstaticvariable "x10d_" + currentmacrobasename + "_user", $$user, 0;

return $$user;
